Sistema de Reconocimiento Facial con ESP32-CAM y Arduino
Proyecto desarrollado en el marco de las Experiencias Acad√©micas de la Facultad de Ingenier√≠a (EAFI 1P-2025) - XIV Edici√≥n.

üìÑ Introducci√≥n
Este proyecto tiene como objetivo 

facilitar el control de acceso utilizando reconocimiento facial en tiempo real, combinando tecnolog√≠as de Internet de las Cosas (IoT) y Deep Learning. La soluci√≥n propuesta captura im√°genes con una 

c√°mara ESP32-CAM, las procesa mediante un script en Python y, finalmente, muestra los resultados en una pantalla f√≠sica de manera sencilla y r√°pida, proporcionando un sistema de seguridad eficiente y accesible.

üéØ Objetivos del Proyecto
General
Desarrollar un sistema de control de acceso que utilice 

reconocimiento facial en tiempo real, integrando una ESP32-CAM y procesamiento en Python, para mejorar la seguridad de forma eficiente y accesible.

Espec√≠ficos

Capturar im√°genes desde la ESP32-CAM.


Detectar rostros autorizados usando Inteligencia Artificial (IA).


Mostrar el resultado en una pantalla TFT conectada a un Arduino Uno.


Registrar los eventos de reconocimiento facial.

üí° Arquitectura del Sistema
El sistema se estructura en una arquitectura de 4 capas para el reconocimiento facial:

Capa de Percepci√≥n (Hardware): Encargada de la captura de datos del entorno f√≠sico.


Componentes: ESP32-CAM SBC OV2640-MODULO WIFI ESP32.

Funci√≥n: Adquisici√≥n de im√°genes y video.

Capa de Red: Gestiona la transmisi√≥n de datos entre dispositivos.


Protocolo: Servidor HTTP (acceso a MJPEG).


Conectividad: Wi-Fi, asignaci√≥n de IP por DHCP.

Capa de Servicio: Realiza el procesamiento, verificaci√≥n y gesti√≥n de datos.


Tecnolog√≠as: face_recognition, Deep Learning, Comunicaci√≥n Serial.

Funciones: Detecci√≥n de PSRAM, captura de MJPEG, modelado de Deep Learning.

Capa de Aplicaci√≥n: Proporciona la interfaz de usuario y visualiza los resultados.


Tecnolog√≠as: Modelo de Deep Learning (visualizaci√≥n de resultados en tiempo real).


Componentes: Arduino Uno, Pantalla TFT (Feedback visual de detecci√≥n: verde o rojo).

üöÄ Diagrama de Flujo del Sistema
El proceso de reconocimiento facial sigue un flujo bien definido:

Inicio: El sistema se activa.

Captura de Video: La ESP32-CAM inicia el streaming.

Detecci√≥n de Rostro: OpenCV detecta si hay un rostro presente en el frame.

Si no hay rostro, el sistema regresa a la captura de video.

Recorte de Rostro: Si se detecta un rostro, este se recorta y se env√≠a para su procesamiento.

Reconocimiento Facial (Deep Learning): El modelo entrenado determina si el rostro es de un usuario autorizado.

Validaci√≥n de Confianza: Se eval√∫a la confianza del reconocimiento.

Si la confianza es alta (rostro autorizado), se env√≠a una se√±al de "acceso permitido" al Arduino.

Si la confianza es baja (rostro no autorizado), se env√≠a una se√±al de "acceso denegado" al Arduino.

Visualizaci√≥n en Pantalla: El Arduino muestra el resultado (verde para autorizado, rojo para denegado) en la pantalla TFT.

Registro de Eventos: Los eventos de acceso (autorizado/denegado) son registrados.

Loop Continuo: El sistema se mantiene en un ciclo continuo, repitiendo el proceso para cada frame de video.

üõ†Ô∏è Tecnolog√≠as Clave y Componentes
El proyecto integra diversas tecnolog√≠as y componentes para su funcionamiento:

Componentes F√≠sicos:

ESP32-CAM: M√≥dulo de c√°mara Wi-Fi para la captura de video.

Arduino: Microcontrolador para la interfaz y comunicaci√≥n con la pantalla TFT.


M√≥dulo USB TTL CP2102: Para programaci√≥n y comunicaci√≥n con la ESP32-CAM.


Pantalla TFT: Para el feedback visual del estado del reconocimiento.


Regulador de Voltaje de 3.3V: Para la alimentaci√≥n adecuada de la ESP32-CAM.

Software y Librer√≠as:

Python 3.x: Lenguaje principal de desarrollo.

OpenCV (cv2): Biblioteca fundamental para procesamiento de im√°genes y reconocimiento facial.

NumPy: Para operaciones num√©ricas eficientes.

pyserial: Para comunicaci√≥n serial entre Python y Arduino.


Firmware ESP32-CAM: Software cargado en la c√°mara para su funcionamiento.

Modelo de Deep Learning: Modelo entrenado para el reconocimiento facial.

‚öôÔ∏è Estructura del Repositorio
El proyecto se organiza en varios scripts Python, cada uno con una funci√≥n espec√≠fica:

CaptureFaces.py: Script para capturar im√°genes de rostros y construir el dataset de entrenamiento. Crea una carpeta Data/ y subcarpetas con el nombre de cada persona.

TrainModel.py: Script para entrenar el modelo de reconocimiento facial (LBPHFaceRecognizer) utilizando las im√°genes capturadas. Genera el archivo FacesModel.xml y un model_config.txt con el umbral de confianza recomendado.

FaceRecognitionSystem.py: Script principal del sistema. Se conecta a la ESP32-CAM, realiza el reconocimiento facial en tiempo real y se comunica con Arduino para el control de la pantalla TFT.

(Arduino_Code.ino): Archivo .ino para el c√≥digo de Arduino que controla la pantalla TFT y responde a los comandos seriales. (Este archivo no est√° incluido en el repositorio y debe ser cargado en tu placa Arduino).
